{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"md`# Exercise: Lunch calculator\n\n${signinNote}\n\nLetâ€™s write your first notebook. A notebook is both readable and functional: a cross between an essay and a program. This tutorial will introduce you to the principles of writing and running code in a notebook, and itâ€™s a great place to start if youâ€™re just learning Grove.\n\n### Steps\n\n1. <a href='#step1'>Set the title</a>\n2. <a href='#step2'>Create a cell</a>\n3. <a href='#step3'>Reference a cell</a>\n4. <a href='#step4'>Keep a cell open</a>\n5. <a href='#step5'>Use viewof to add a slider</a>\n6. <a href='#step6'>Use a block statement for calculations</a>`","pinCode":false,"dname":"d866e141-f6de-4a33-808b-63b5dc7d0ea5","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"step1 = (md`---\n\n## Set the title\n\nText content like this is typically written in Grove using [Markdown](https://guides.github.com/features/mastering-markdown/), and the title of a notebook is taken from its first heading. So your new notebook is titled _Untitled_. Letâ€™s replace that with _Lunch calculator_.\n\nSelect the text, type 'Lunch calculator' and hit ${key(\n  \"Shift-Enter\"\n)} to run the code.`)","pinCode":false,"dname":"92fe30ba-5930-4996-9bb2-5e7738ffaf5c","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"video(\"tutorial-1/1\")","pinCode":false,"dname":"2a2121d8-27b1-437a-bcd6-97066f41c6a2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"step2 = (md`---\n\n## Create a cell\n\nNext, letâ€™s create a new cell and add a name and value. Click the + button below the Lunch calculator cell, and type this code:\n\n\\`\\`\\`js\nsandwiches = 10\n\\`\\`\\`\n\nGroveâ€™s language is JavaScript, with a few changes that make it better for interactive & creative interfaces. This new cell has the name \\`sandwiches\\`, and a value of \\`10\\`.\n`)","pinCode":false,"dname":"8d6f12f0-ec0a-4b9b-95bb-c17bfff47ed7","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"video(\"tutorial-1/2\")","pinCode":false,"dname":"5e92905a-6602-43ca-8694-583bc3ee4908","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"step3 = (md`---\n\n## Reference a cell\n\nLetâ€™s say that each sandwich costs $5. Weâ€™ll compute the total cost of this lunch with a new cell called \\`total\\`.\n\nThis is a great chance to use Groveâ€™s built-in autocompletion, so you donâ€™t have to type the whole word 'sandwiches'. Try just trying \\`total = sa\\` and then hitting ${key(\n  \"Tab\"\n)} â€” Grove will complete it to sandwiches for you.\n\n\\`\\`\\`js\ntotal = sandwiches * 5\n\\`\\`\\`\n`)","pinCode":false,"dname":"71b2efa7-4587-4fdf-9bf6-ffb1fed10d12","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"video(\"tutorial-1/3\")","pinCode":false,"dname":"a4c43821-b955-496f-8932-59c4eb850b2f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"step4 = (md`---\n\n## Keep a cell open\n\nNotebooks are made up of cells like these, which generate output. You can see the code that produces each cell by toggling it - clicking the ${toggle} icon to its left. You might want to keep a cell open, so that everyone who reads the notebook can see the code behind it. Letâ€™s keep the \\`total\\` cell open, so that everyone knows how that value is computed.\n\nOpen the total cell if it isnâ€™t already open, and then click the pin icon ${pin} to keep it open.\n`)","pinCode":false,"dname":"b7e5a465-0070-44e1-856e-48dca90145e2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"video(\"tutorial-1/4\")","pinCode":false,"dname":"254bd210-7d9f-4c87-8466-726df126abac","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"step5 = (md`---\n\n## Use viewof to add a slider\n\nThis notebook calculates the cost of a certain number of sandwiches, but itâ€™d be better if any reader could interact with it without having to change the code. Letâ€™s make the number of sandwiches customizable by using \\`viewof\\`, an Grove feature that lets a cell expose the value of an input.\n\nReplace the \\`sandwiches\\` cellâ€™s source with this:\n\n\\`\\`\\`js\nviewof sandwiches = html\\`<input type=range />\\`\n\\`\\`\\`\n\nWith this change, the \\`sandwiches\\` cell will now show a slider, and moving that slider updates the \\`total\\` value. Thatâ€™s the magic of Groveâ€™s reactive notebooks!\n`)","pinCode":false,"dname":"0443997f-4b48-4ea8-a5a3-b7fda9ab53c3","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"video(\"tutorial-1/5\")","pinCode":false,"dname":"b8df5523-6791-4891-bc0e-0679017f8ef0","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"step6 = (md`---\n\n## Use a block statement for calculations\n\nSo far weâ€™ve been using simple cells â€” assigning a cell name to a value or a simple calculation. What if you want to do more, like use \\`for\\` loops, \\`if\\` statements, and other JavaScript features? You can do so with a block: a cell bracketed by \\`{\\` and \\`}\\` characters.\n\nIf you want a block to return a value, youâ€™ll have to use the \\`return\\` statement, just like you would with a JavaScript function.\n\nFor this example, letâ€™s assume that the restaurant gives a 10% discount on orders of 51 or more sandwiches.\n\n\\`\\`\\`js\ntotal = {\n  let total = sandwiches * 5;\n  if (sandwiches > 50) {\n    total *= 0.9;\n  }\n  return total;\n}\n\\`\\`\\`\n\nBlocks are like functions, but they run immediately and donâ€™t have parameters. Just like before, when you move the slider, the value of \\`total\\` is automatically recomputed.\n`)","pinCode":false,"dname":"bdcf19e2-a2e0-4642-96cc-bf7b355f8832","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"video(\"tutorial-1/6\")","pinCode":false,"dname":"1313ea9e-c3a3-4001-9284-c91dced3e8b9","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n\n## Review\n\n- Notebooks are made up of cells, which can have names\n- A notebookâ€™s title is taken from its first cell\n- Most notebooks use Markdown for their text content\n- You can hit ${key(\"Shift-Enter\")} to evaluate a cell and ${key(\n  \"Tab\"\n)} to autocomplete a name.\n- Clicking the ${pin} icon keeps a cell open.\n\n## Further reading\n\n- [Getting started Markdown](https://guides.github.com/features/mastering-markdown/)\n- [Introduction to Views](https://observablehq.com/@observablehq/introduction-to-views)\n\n## Getting extra help\n\nHaving trouble with this tutorial? Weâ€™re happy to assist you: post in the [Grove user forum](https://talk.observablehq.com/) and we can help out.\n\n## In the next tutorial\n\nNext up, [weâ€™ll learn how to make a request to an API and import cells from other notebooks. Letâ€™s go ðŸ‘‰](/@observablehq/tutorial-2-dog-pictures)`","pinCode":false,"dname":"8eed63f9-54bc-40a2-ac2f-158dbf9f7db9","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"seriesNavigation(1)","pinCode":false,"dname":"ddca8f50-00d8-40a4-9b8f-6b14af827b2f","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"md`---\n\n## Appendix`","pinCode":false,"dname":"7c55fd4b-734c-4a53-b8ce-ea6f573716e2","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"import { toggle,pin,video,key,signinNote,seriesNavigation }  from 'tutorial/6a6d6989dd6b59c6'","pinCode":false,"dname":"98cca52e-9fdc-44f1-9e41-379cf3352288","codeMode":"javascript2"}}}],"version":"2.19.1"}